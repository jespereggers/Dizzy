[gd_scene load_steps=15 format=2]

[ext_resource path="res://Assets/tiles/dizzy/dizzy_idle.png" type="Texture" id=1]
[ext_resource path="res://Scripts/state_machine/state_machine.gd" type="Script" id=2]
[ext_resource path="res://Scripts/state_machine/idle_state.gd" type="Script" id=4]
[ext_resource path="res://Scripts/state_machine/walk_state.gd" type="Script" id=5]
[ext_resource path="res://Scripts/state_machine/jump_state.gd" type="Script" id=6]
[ext_resource path="res://Scripts/state_machine/salto_state.gd" type="Script" id=7]
[ext_resource path="res://Scripts/state_machine/climb_state.gd" type="Script" id=8]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

onready var animation: AnimationPlayer = $animation
onready var texture: Sprite = $texture
onready var state_machine: Node = $state_machine

var motion: Vector2 = Vector2()
var unlocked: bool = false
var action: Array = [\"idle\"]
var locked: bool = false

const UP: Vector2 = Vector2(0, -1)
const GRAVITY: int  = 3
const MAXFALLSPEED: int = 40
const MAXSPEED: int = 30
const JUMPFORCE: int = 90
const ACCEL: int = 12


func _physics_process(delta):
	motion.y += GRAVITY
	
	if motion.y > MAXFALLSPEED:
		motion.y = MAXFALLSPEED
	
	motion.x = clamp(motion.x, -MAXSPEED, MAXSPEED)
	print(locked)
	if not locked:
		
		if can_autojump():
			motion.y = -JUMPFORCE / 2
		
		#if can_act_on_wall():
		#	unlocked = true
		#	$unlocked_cooldown.start(0.2)
			
		if get_height() < 15 or unlocked:
			action = []
			
			if Input.is_action_pressed(\"left\"):
				action = [\"walk\", \"left\"]
			elif Input.is_action_pressed(\"right\"):
				action = [\"walk\", \"right\"]
			
			if Input.is_action_pressed(\"jump\"):
				if Input.is_action_pressed(\"left\"):
					action = [\"jump\", \"left\"]
				elif Input.is_action_pressed(\"right\"):
					action = [\"jump\", \"right\"]
				else:
					action = [\"salto\"]
					
			elif Input.is_action_pressed(\"salto\"):
				action = [\"salto\"]

			if action == []:
				action = [\"idle\"]
			else:
				texture.flip_h = motion.x < 2

		else:
			action = [\"idle\"]
			
		state_machine.update_state(action[0])
	update_motion(action)

	motion = move_and_slide(motion, UP)


func update_motion(action: Array):
	# action[0] -> action_name
	# action[1] -> action_direction
	
	match action[0]:
		\"idle\":
			motion.x = lerp(motion.x, 0, 0.2)
			
		\"walk\":
			if action[1] == \"left\":
				motion.x -= ACCEL
			else:
				motion.x += ACCEL
				
		\"jump\":
			motion.y = -JUMPFORCE
			if action[1] == \"right\":
				motion.x += ACCEL
			else:
				motion.x -= ACCEL
				
		\"salto\":
			motion.y = -JUMPFORCE
			motion.x = 0
			
		\"climb\":
			pass


func get_height() -> float:
	if $raycast.is_colliding():
		return self.position.distance_to($raycast.get_collision_point())
	return 99.99


func can_autojump() -> bool:
	if texture.flip_h:
		# Check autojump on left side
		if $raycast_left_buttom.is_colliding():
			if not $raycast_left_middle.is_colliding():
				return true
	else:
		# Check autojump on right side
		if $raycast_right_buttom.is_colliding():
			if not $raycast_right_middle.is_colliding():
				return true
	return false


func can_act_on_wall() -> bool:
	if texture.flip_h:
		# Check autojump on left side
		if $raycast_left_buttom.is_colliding():
			if not $raycast_left_top.is_colliding():
				return true
	else:
		# Check autojump on right side
		if $raycast_right_buttom.is_colliding():
			if not $raycast_right_top.is_colliding():
				return true
	return false


func _on_unlocked_cooldown_timeout():
	unlocked = false

"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 9.27167, 6.41797 )

[sub_resource type="Animation" id=3]
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 32, 36 ]
}

[sub_resource type="Animation" id=4]
length = 0.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("texture:frame")
tracks/0/interp = 0
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0, 1 ]
}

[sub_resource type="Animation" id=5]
length = 0.7
tracks/0/type = "value"
tracks/0/path = NodePath("texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.7 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 25, 32 ]
}

[sub_resource type="Animation" id=6]
length = 0.7
tracks/0/type = "value"
tracks/0/path = NodePath("texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.7 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 8, 15 ]
}

[sub_resource type="Animation" id=7]
length = 0.7
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("texture:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.001, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 16, 16, 24 ]
}

[node name="player" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="texture" type="Sprite" parent="."]
texture = ExtResource( 1 )
vframes = 5
hframes = 8

[node name="collision" type="CollisionShape2D" parent="."]
position = Vector2( -0.0471038, 6.31993 )
shape = SubResource( 2 )

[node name="animation" type="AnimationPlayer" parent="."]
anims/climb = SubResource( 3 )
anims/idle = SubResource( 4 )
anims/jump = SubResource( 5 )
anims/salto = SubResource( 6 )
anims/walk = SubResource( 7 )

[node name="state_machine" type="Node" parent="."]
script = ExtResource( 2 )

[node name="climb_state" type="Node" parent="state_machine"]
script = ExtResource( 8 )

[node name="idle_state" type="Node" parent="state_machine"]
script = ExtResource( 4 )

[node name="walk_state" type="Node" parent="state_machine"]
script = ExtResource( 5 )

[node name="jump_state" type="Node" parent="state_machine"]
script = ExtResource( 6 )

[node name="salto_state" type="Node" parent="state_machine"]
script = ExtResource( 7 )

[node name="raycast" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( 0, 100 )

[node name="raycast_left_buttom" type="RayCast2D" parent="."]
position = Vector2( 0, 10 )
rotation = -1.5708
enabled = true
cast_to = Vector2( 0, -10 )

[node name="raycast_left_middle" type="RayCast2D" parent="."]
rotation = -1.5708
enabled = true
cast_to = Vector2( 0, -10 )

[node name="raycast_right_buttom" type="RayCast2D" parent="."]
position = Vector2( 0, 10 )
rotation = -1.5708
enabled = true
cast_to = Vector2( 0, 10 )

[node name="raycast_right_middle" type="RayCast2D" parent="."]
rotation = -1.5708
enabled = true
cast_to = Vector2( 0, 10 )

[node name="raycast_left_top" type="RayCast2D" parent="."]
position = Vector2( 0, -12 )
rotation = -1.5708
enabled = true
cast_to = Vector2( 0, -10 )

[node name="raycast_right_top" type="RayCast2D" parent="."]
position = Vector2( 0, -12 )
rotation = -1.5708
enabled = true
cast_to = Vector2( 0, 10 )

[node name="unlocked_cooldown" type="Timer" parent="."]
[connection signal="animation_finished" from="animation" to="state_machine" method="_on_animation_animation_finished"]
[connection signal="timeout" from="unlocked_cooldown" to="." method="_on_unlocked_cooldown_timeout"]
